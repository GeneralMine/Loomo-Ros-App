

  #http://wiki.ros.org/base_local_planner
  #acc values are good to set to the real maximum max velocity can be set lower
  #The x acceleration limit of the robot in meters/sec^2
  acc_lim_x: 4.0
  # (double, default: 2.5)The y acceleration limit of the robot in meters/sec^2
  acc_lim_y: 4.0
  #(double, default: 3.2)The rotational acceleration limit of the robot in radians/sec^2
  acc_lim_theta: 5.29

  #(double, default: 0.55)The absolute value of the maximum translational velocity for the robot in m/s
  #max_trans_vel: 0.55
  # (double, default: 0.1)The absolute value of the minimum translational velocity for the robot in m/s
  #min_trans_vel: 0.1
  #double, default: 0.55)The maximum x velocity for the robot in m/s.
  max_vel_x: 0.4
  #The minimum forward velocity allowed for the base in meters/sec. It is useful to specify this to guarantee that velocity commands sent to a mobile base are high enough to allow the base to overcome friction.
  #, DONT use this as negative for backwards motion. 
  # for negative motion use escape velocity! if this is set to  low Robot wont drive correctly especially in opposite directions
  min_vel_x: 0.1
  escape_vel: -0.2
  #(double, default: 0.1)The maximum y velocity for the robot in m/s
  #max_vel_y: 0.0
  #(double, default: -0.1)The minimum y velocity for the robot in m/s
  #min_vel_y: 0.0
  #(double, default: 1.0)The absolute value of the maximum rotational velocity for the robot in rad/s
  #max_rot_vel:  0.75
  #(double, default: 0.4)The absolute value of the minimum rotational velocity for the robot in rad/s
  #min_rot_vel: -0.25
  #those are the correct params for base_local planner
  max_vel_theta: 0.8
  min_vel_theta: -0.8
  # turned this a bit down so the robot doesn't spin too fast
  min_in_place_vel_theta: 0.2
  #This is base_local_planner
  #The weighting for how much the controller should stay close to the path it was given, maximal possible value is 5.0 default:0.6
  #the weight for the path distance. The higher the more the robot will stick to its path. Useful in dangereous areas where you want the robot to avoid the forbidden tones
  #maximum: 5.0 default: 0.6
  pdist_scale: 0.5
  #The weighting for how much the controller should attempt to reach its local goal, also controls speed, maximal possible value is 5.0 default: 0.8
  gdist_scale: 1.0
  #The weighting for how much the controller should attempt to avoid obstacles default: 0.01
  #default: 0.01 max: 5.0
  occdist_scale: 0.1
  #our robot is not holonomic
  holonomic_robot: false
  #default: 1.7 The amount of time to forward-simulate trajectories in seconds
  #sim_time: 1.7
  #default: 0.025 The step size, in meters, to take between points on a given trajectory
  #sim_granularity: 0.025
  #default: 3 The number of samples to use when exploring the x velocity space 
  #vx_samples: 3
  #default:10 The number of samples to use when exploring the y velocity space
  #vy_samples: 10
  #default:20 The number of samples to use when exploring the theta velocity space
  #vth_samples: 20
  #default: 32.0 The weighting for how much the controller should stay close to the path it was given
  #path_distance_bias: 32.0
  #default: 24.0 The weighting for how much the controller should attempt to reach its local goal, also controls speed
  #goal_distance_bias: 24.0
  #default: 0.01 The weighting for how much the controller should attempt to avoid obstacless
  #occdist_scale: 0.01
  #default: 0.325 The distance from the center point of the robot to place an additional scoring point, in meters
  #forward_point_distance: 0.325
  #default 0.2 The amount of time that the robot must stop before a collision in order for a trajectory to be considered valid in seconds
  # set it a little higher beacause loomo is always really close to obstacles
  #this is dwa
  stop_time_buffer: 1.5
  # default: 0.25 The absolute value of the velocity at which to start scaling the robot's footprint, in m/s
  #scaling_speed: 0.25
  #default: 0.2 The maximum factor to scale the robot's footprint by
  #max_scaling_factor: 0.2
  #defualt: 0.05 How far the robot must travel in meters before oscillation flags are reset
  #oscillation_reset_dist: 0.05
  #default: true Defines whether or not to eat up the plan as the robot moves along the path. If set to true, points will fall off the end of the plan once the robot moves 1 meter past them.
  #prune_plan: true
  dwa: true
  publish_cost_grid_pc: true
  meter_scoring: true
  sim_granularity: 0.025
  sim_time: 5.0
  vx_samples: 3
  vtheta_samples: 20
  xy_goal_tolerance: 0.3
  yaw_goal_tolerance: 0.05
